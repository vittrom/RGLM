library("e1071")
set.seed(12345)
train <- read.csv("Data/Titanic/train.csv")
test <-  read.csv("Data/Titanic/test.csv")
cols_to_keep = c(3, 5, 6, 7, 8, 10, 12)
X_train = train[, cols_to_keep]
y_train = train$Survived
X_test = test[, cols_to_keep - 1]
# Transform columns dataset
X_train[, 1] = as.factor(X_train[, 1])
X_train[, 4] = as.factor(X_train[, 4])
X_train[, 5] = as.factor(X_train[, 5])
X_test[, 1] = as.factor(X_test[, 1])
X_test[, 4] = as.factor(X_test[, 4])
X_test[, 5] = as.factor(X_test[, 5])
X_train = cbind(X_train, y_train)
X_train = X_train[complete.cases(X_train), ]
y_train = X_train[, ncol(X_train)]
X_train = X_train[,-8]
for (i in 1:ncol(X_train)){
X_train[, i] = as.numeric(X_train[, i])
X_test[, i] = as.numeric(X_test[, i])
}
mean_age_train = mean(X_train$Age)
mean_fare_train = mean(X_train$Fare)
X_test[is.na(X_test$Age), 3] = mean_age_train
X_test[is.na(X_test$Fare), 6] = mean_fare_train
bags = 100
model_rglm = randomGLM(x=X_train, y=y_train, xtest = X_test, nBags = bags)
model_rf_bigmtry = randomForest(x = X_train, y = as.factor(y_train),ntree = 500, mtry = ncol(X_train))
model_rf = randomForest(x = X_train, y = as.factor(y_train), ntree = 500)
model_xtree = extraTrees(x = X_train, y = as.factor(y_train), ntree = 500)
model_svm = svm(x = X_train, y = as.factor(y_train))
pred_rglm = data.frame(test$PassengerId, model_rglm$predictedTest)
pred_rf_bigmtry = data.frame(test$PassengerId, predict(model_rf_bigmtry, newdata=X_test))
pred_rf = data.frame(test$PassengerId, predict(model_rf, newdata=X_test))
pred_xtree = data.frame(test$PassengerId, predict(model_xtree, newdata=X_test))
pred_svm = data.frame(test$PassengerId, predict(model_svm, newdata=X_test))
View(pred_xtree)
View(pred_xtree)
library("randomGLM")
library("randomForest")
library("extraTrees")
library("e1071")
set.seed(12345)
train <- read.csv("Data/Titanic/train.csv")
test <-  read.csv("Data/Titanic/test.csv")
cols_to_keep = c(3, 5, 6, 7, 8, 10, 12)
X_train = train[, cols_to_keep]
y_train = train$Survived
X_test = test[, cols_to_keep - 1]
# Transform columns dataset
X_train[, 1] = as.factor(X_train[, 1])
X_train[, 4] = as.factor(X_train[, 4])
X_train[, 5] = as.factor(X_train[, 5])
X_test[, 1] = as.factor(X_test[, 1])
X_test[, 4] = as.factor(X_test[, 4])
X_test[, 5] = as.factor(X_test[, 5])
X_train = cbind(X_train, y_train)
X_train = X_train[complete.cases(X_train), ]
y_train = X_train[, ncol(X_train)]
X_train = X_train[,-8]
for (i in 1:ncol(X_train)){
X_train[, i] = as.numeric(X_train[, i])
X_test[, i] = as.numeric(X_test[, i])
}
mean_age_train = mean(X_train$Age)
mean_fare_train = mean(X_train$Fare)
X_test[is.na(X_test$Age), 3] = mean_age_train
X_test[is.na(X_test$Fare), 6] = mean_fare_train
bags = 100
model_rglm = randomGLM(x=X_train, y=y_train, xtest = X_test, nBags = bags)
model_rf_bigmtry = randomForest(x = X_train, y = as.factor(y_train),ntree = 500, mtry = ncol(X_train))
model_rf = randomForest(x = X_train, y = as.factor(y_train), ntree = 500)
model_xtree = extraTrees(x = X_train, y = as.factor(y_train), ntree = 500)
model_svm = svm(x = X_train, y = as.factor(y_train))
pred_rglm = data.frame(test$PassengerId, model_rglm$predictedTest)
pred_rf_bigmtry = data.frame(test$PassengerId, predict(model_rf_bigmtry, newdata=X_test))
pred_rf = data.frame(test$PassengerId, predict(model_rf, newdata=X_test))
pred_xtree = data.frame(test$PassengerId, predict(model_xtree, newdata=X_test))
pred_svm = data.frame(test$PassengerId, predict(model_svm, newdata=X_test))
col_name = c("PassengerId", "Survived")
colnames(pred_rglm) = col_name
colnames(pred_rf_bigmtry) = col_name
colnames(pred_rf) = col_name
colnames(pred_xtree) = col_name
colnames(pred_svm) = col_name
write.csv(pred_rglm, file="Data/Titanic/Submission/sub_rglm.csv", row.names = FALSE)
write.csv(pred_rf_bigmtry, file="Data/Titanic/Submission/sub_rf_bigmtry.csv", row.names = FALSE)
write.csv(pred_rf, file="Data/Titanic/Submission/sub_rf.csv", row.names = FALSE)
write.csv(pred_xtree, file="Data/Titanic/Submission/sub_xtree.csv", row.names = FALSE)
write.csv(pred_svm, file="Data/Titanic/Submission/sub_svm.csv", row.names = FALSE)
rm(list=ls())
library("randomGLM")
library("randomForest")
library("extraTrees")
library("e1071")
set.seed(12345)
train <- read.csv("Data/HousePred/train.csv")
test <-  read.csv("Data/HousePred/test.csv")
View(train)
x = rnorm(1000)
x2 = rnorm(1000)
y = 100*x + 0.1 * x2 + 5
summary(lm(y ~ x + x2))
y = 100*x + 0.1 * x2 + 5  + rnorm(1000)
summary(lm(y ~ x + x2))
y = 100*(x/5) + 0.1 * x2 + 5  + rnorm(1000)
summary(lm(y ~ x + x2))
y = 100*(x/5) + 0.1 * x2/5 + 5  + rnorm(1000)
summary(lm(y ~ x + x2))
x = rnorm(1000, mean = 5)
y = 100*x + 0.1 * x2 + 5  + rnorm(1000)
summary(lm(y ~ x + x2))
y = 100*scale(x) + 0.1 * scale(x2) + 5  + rnorm(1000)
summary(lm(y ~ x + x2))
View(test)
apply(train, 2, is.na)
apply(apply(train, 2, is.na), 2, sum)
apply(apply(test, 2, is.na), 2, sum)
apply(apply(train, 2, is.na), 2, sum) == 0
library("randomGLM")
library("randomForest")
library("extraTrees")
library("e1071")
set.seed(12345)
train <- read.csv("Data/HousePred/train.csv")
test <-  read.csv("Data/HousePred/test.csv")
cols_to_keep = apply(apply(train, 2, is.na), 2, sum) == 0
X_train = train[, cols_to_keep]
View(X_train)
X_train[, -"SalePrice"]
X_train[, -SalePrice]
X_train = X_train[, 1:(ncol(X_train) - 1)]
View(X_train)
X_test = test[, cols_to_keep - 1]
View(X_test)
View(train)
View(X_train)
View(X_train)
X_test = test[, cols_to_keep]
X_test = test[, cols_to_keep[-81]]
View(X_test)
View(X_train)
library("randomGLM")
library("randomForest")
library("extraTrees")
library("e1071")
set.seed(12345)
train <- read.csv("Data/HousePred/train.csv")
test <-  read.csv("Data/HousePred/test.csv")
cols_to_keep = apply(apply(train, 2, is.na), 2, sum) == 0
X_train = train[, cols_to_keep]
X_train = X_train[, 2:(ncol(X_train) - 1)]
y_train = train$SalePrice
X_test = test[, cols_to_keep[-81]]
X_test = X_test[, 2:61]
setdiff(colnames(X_test), colnames(X_train))
setdiff(colnames(X_train), colnames(X_test))
str(X_train)
as.factor(X_train$YrSold)
as.numeric(as.factor(X_train$YrSold))
X_train[, YrSold]
X_train[, "YrSold"]
convert_to_factor = c("YrSold", "YearRemodAdd", "YearBuilt")
for (c in convert_to_factor){
X_train[, c] = as.factor(X_train[, c])
X_test[, c] = as.factor(X_test[, c])
}
for (i in 1:ncol(X_train)){
X_train[, i] = as.numeric(X_train[, i])
X_test[, i] = as.numeric(X_test[, i])
}
View(X_train)
View(X_test)
View(X_test)
apply(apply(X_test, 2, is.na), 2, sum)
?predict
bags = 100
model_rglm = randomGLM(x=X_train, y=y_train, xtest = X_test, nBags = bags)
model_rglm$predictedTest
sum(is.na(model_rglm$predictedTest))
model_rf_bigmtry = randomForest(x = X_train, y = as.factor(y_train),ntree = 500, mtry = ncol(X_train))
predict(model_rf_bigmtry, newdata=X_test)
View(X_train)
library("randomGLM")
library("randomForest")
library("extraTrees")
library("e1071")
set.seed(12345)
train <- read.csv("Data/HousePred/train.csv")
test <-  read.csv("Data/HousePred/test.csv")
cols_to_keep = apply(apply(train, 2, is.na), 2, sum) == 0
X_train = train[, cols_to_keep]
X_train = X_train[, 2:(ncol(X_train) - 1)]
y_train = train$SalePrice
X_test = test[, cols_to_keep[-81]]
X_test = X_test[, 2:61]
convert_to_factor = c("YrSold", "YearRemodAdd", "YearBuilt")
for (c in convert_to_factor){
X_train[, c] = as.factor(X_train[, c])
X_test[, c] = as.factor(X_test[, c])
}
for (i in 1:ncol(X_train)){
X_train[, i] = as.numeric(X_train[, i])
X_test[, i] = as.numeric(X_test[, i])
X_test[is.na(X_test[, i]), i] = floor(mean(X_train[, i]))
}
apply(apply(X_test, 2, is.na), 2, sum)
bags = 100
model_rglm = randomGLM(x=X_train, y=y_train, xtest = X_test, nBags = bags)
model_rf_bigmtry = randomForest(x = X_train, y = as.factor(y_train),ntree = 500, mtry = ncol(X_train))
model_rf = randomForest(x = X_train, y = as.factor(y_train), ntree = 500)
model_xtree = extraTrees(x = X_train, y = as.factor(y_train), ntree = 500)
model_svm = svm(x = X_train, y = as.factor(y_train))
pred_rglm = data.frame(test$PassengerId, model_rglm$predictedTest)
pred_rf_bigmtry = data.frame(test$PassengerId, predict(model_rf_bigmtry, newdata=X_test))
pred_rf = data.frame(test$PassengerId, predict(model_rf, newdata=X_test))
pred_xtree = data.frame(test$PassengerId, predict(model_xtree, newdata=X_test))
pred_svm = data.frame(test$PassengerId, predict(model_svm, newdata=X_test))
View(test)
View(test)
library("randomGLM")
library("randomForest")
library("extraTrees")
library("e1071")
set.seed(12345)
data <- read.csv("Data/UKHousing/price_paid_records.csv", nrows = 10000)
View(data)
str(data)
data <- read.csv("Data/UKHousing/price_paid_records.csv", nrows = 50000)
str(data)
data <- read.csv("Data/UKHousing/price_paid_records.csv", nrows = 100000)
str(data)
set.seed(12345)
data <- read.csv("Data/UKHousing/price_paid_records.csv", nrows = 100000)
cols_to_keep = c(4, 5, 6, 9)
X = data[, cols_to_keep]
y = data[, 2]
n_train = 80000
accuracy_rglm = rep(0, 100)
accuracy_rf_bigmtry = rep(0, 100)
accuracy_rf = rep(0, 100)
accuracy_xtree = rep(0, 100)
accuracy_svm = rep(0, 100)
for (i in 1:100){
idx = sample(length(y), size = n_train, replace = FALSE)
X_train = X[idx, ]
y_train = y[idx]
X_test = X[-idx, ]
y_test = y[-idx]
bags = 100
model_rglm = randomGLM(x=X_train, y=y_train, xtest = X_test, nBags = bags)
model_rf_bigmtry = randomForest(x = X_train, y = as.factor(y_train),ntree = 500, mtry = 8)
model_rf = randomForest(x = X_train, y = as.factor(y_train), ntree = 500)
model_xtree = extraTrees(x = X_train, y = as.factor(y_train), ntree = 500)
model_svm = svm(x = X_train, y = as.factor(y_train))
accuracy_rglm[i] = 1 - sum(abs(model_rglm$predictedTest - y_test))/length(y_test)
accuracy_rf_bigmtry[i] = 1 - sum(abs(as.numeric(predict(model_rf_bigmtry, newdata=X_test)) - 1 - y_test))/length(y_test)
accuracy_rf[i] = 1 - sum(abs(as.numeric(predict(model_rf, newdata=X_test)) - 1 - y_test))/length(y_test)
accuracy_xtree[i] = 1 - sum(abs(as.numeric(predict(model_xtree, newdata=X_test)) - 1 - y_test))/length(y_test)
accuracy_svm[i] =  1 - sum(abs(as.numeric(predict(model_svm, newdata=X_test)) - 1 - y_test))/length(y_test)
}
apply(apply(X, 2, is.na), 2, sum)
apply(apply(y, 2, is.na), 2, sum)
sum(is.na(y))
library("randomGLM")
library("randomForest")
library("extraTrees")
library("e1071")
set.seed(12345)
data <- read.csv("Data/UKHousing/price_paid_records.csv", nrows = 100000)
cols_to_keep = c(4, 5, 6, 9)
X = data[, cols_to_keep]
X = apply(X, 2, as.numeric)
y = data[, 2]
n_train = 80000
accuracy_rglm = rep(0, 100)
accuracy_rf_bigmtry = rep(0, 100)
accuracy_rf = rep(0, 100)
accuracy_xtree = rep(0, 100)
accuracy_svm = rep(0, 100)
apply(apply(y, 2, is.na), 2, sum)
apply(apply(X, 2, is.na), 2, sum)
library("randomGLM")
library("randomForest")
library("extraTrees")
library("e1071")
set.seed(12345)
data <- read.csv("Data/UKHousing/price_paid_records.csv", nrows = 100000)
cols_to_keep = c(4, 5, 6, 9)
X = data[, cols_to_keep]
y = data[, 2]
for (i in 1:ncol(X)){
X[, i] = as.numeric(X[, i])
}
apply(apply(X, 2, is.na), 2, sum)
n_train = 80000
accuracy_rglm = rep(0, 100)
accuracy_rf_bigmtry = rep(0, 100)
accuracy_rf = rep(0, 100)
accuracy_xtree = rep(0, 100)
accuracy_svm = rep(0, 100)
library("randomGLM")
library("randomForest")
library("extraTrees")
library("e1071")
set.seed(12345)
data <- read.csv("Data/UKHousing/price_paid_records.csv", nrows = 100000)
cols_to_keep = c(4, 5, 6, 9)
X = data[, cols_to_keep]
y = data[, 2]
for (i in 1:ncol(X)){
X[, i] = as.numeric(X[, i])
}
n_train = 80000
accuracy_rglm = rep(0, 100)
accuracy_rf_bigmtry = rep(0, 100)
accuracy_rf = rep(0, 100)
accuracy_xtree = rep(0, 100)
accuracy_svm = rep(0, 100)
for (i in 1:100){
idx = sample(length(y), size = n_train, replace = FALSE)
X_train = X[idx, ]
y_train = y[idx]
X_test = X[-idx, ]
y_test = y[-idx]
bags = 100
model_rglm = randomGLM(x=X_train, y=y_train, xtest = X_test, nBags = bags)
model_rf_bigmtry = randomForest(x = X_train, y = as.factor(y_train),ntree = 500, mtry = 8)
model_rf = randomForest(x = X_train, y = as.factor(y_train), ntree = 500)
model_xtree = extraTrees(x = X_train, y = as.factor(y_train), ntree = 500)
model_svm = svm(x = X_train, y = as.factor(y_train))
accuracy_rglm[i] = 1 - sum(abs(model_rglm$predictedTest - y_test))/length(y_test)
accuracy_rf_bigmtry[i] = 1 - sum(abs(as.numeric(predict(model_rf_bigmtry, newdata=X_test)) - 1 - y_test))/length(y_test)
accuracy_rf[i] = 1 - sum(abs(as.numeric(predict(model_rf, newdata=X_test)) - 1 - y_test))/length(y_test)
accuracy_xtree[i] = 1 - sum(abs(as.numeric(predict(model_xtree, newdata=X_test)) - 1 - y_test))/length(y_test)
accuracy_svm[i] =  1 - sum(abs(as.numeric(predict(model_svm, newdata=X_test)) - 1 - y_test))/length(y_test)
}
train <- read.csv("Data/Titanic/train.csv")
data <- read.csv("Data/UKHousing/price_paid_records.csv", nrows = 30000)
View(data)
rm(list=ls())
library("randomGLM")
library("randomForest")
library("extraTrees")
library("e1071")
set.seed(12345)
pulsar_stars <- read.csv("Data/PulsarStar/pulsar_stars.csv")
X = pulsar_stars[,1:8]
y = pulsar_stars[, 9]
n_train = 13000
accuracy_rglm = rep(0, 100)
accuracy_rf_bigmtry = rep(0, 100)
accuracy_rf = rep(0, 100)
accuracy_xtree = rep(0, 100)
accuracy_svm = rep(0, 100)
for (i in 1:100){
idx = sample(length(y), size = n_train, replace = FALSE)
X_train = X[idx, ]
y_train = y[idx]
X_test = X[-idx, ]
y_test = y[-idx]
bags = 100
model_rglm = randomGLM(x=X_train, y=y_train, xtest = X_test, nBags = bags)
model_rf_bigmtry = randomForest(x = X_train, y = as.factor(y_train),ntree = 500, mtry = ncol(X_train))
model_rf = randomForest(x = X_train, y = as.factor(y_train), ntree = 500)
model_xtree = extraTrees(x = X_train, y = as.factor(y_train), ntree = 500)
model_svm = svm(x = X_train, y = as.factor(y_train))
accuracy_rglm[i] = 1 - sum(abs(model_rglm$predictedTest - y_test))/length(y_test)
accuracy_rf_bigmtry[i] = 1 - sum(abs(as.numeric(predict(model_rf_bigmtry, newdata=X_test)) - 1 - y_test))/length(y_test)
accuracy_rf[i] = 1 - sum(abs(as.numeric(predict(model_rf, newdata=X_test)) - 1 - y_test))/length(y_test)
accuracy_xtree[i] = 1 - sum(abs(as.numeric(predict(model_xtree, newdata=X_test)) - 1 - y_test))/length(y_test)
accuracy_svm[i] =  1 - sum(abs(as.numeric(predict(model_svm, newdata=X_test)) - 1 - y_test))/length(y_test)
}
library("randomGLM")
library("randomForest")
library("extraTrees")
library("e1071")
set.seed(12345)
pulsar_stars <- read.csv("Data/PulsarStar/pulsar_stars.csv")
X = pulsar_stars[,1:8]
y = pulsar_stars[, 9]
n_train = 13000
accuracy_rglm = rep(0, 100)
accuracy_rf_bigmtry = rep(0, 100)
accuracy_rf = rep(0, 100)
accuracy_xtree = rep(0, 100)
accuracy_svm = rep(0, 100)
for (i in 1:100){
idx = sample(length(y), size = n_train, replace = FALSE)
X_train = X[idx, ]
y_train = y[idx]
X_test = X[-idx, ]
y_test = y[-idx]
bags = 100
model_rglm = randomGLM(x=X_train, y=y_train, xtest = X_test, nBags = bags)
model_rf_bigmtry = randomForest(x = X_train, y = as.factor(y_train),ntree = 500, mtry = ncol(X_train))
model_rf = randomForest(x = X_train, y = as.factor(y_train), ntree = 500)
model_xtree = extraTrees(x = X_train, y = as.factor(y_train), ntree = 500)
model_svm = svm(x = X_train, y = as.factor(y_train))
accuracy_rglm[i] = 1 - sum(abs(model_rglm$predictedTest - y_test))/length(y_test)
accuracy_rf_bigmtry[i] = 1 - sum(abs(as.numeric(predict(model_rf_bigmtry, newdata=X_test)) - 1 - y_test))/length(y_test)
accuracy_rf[i] = 1 - sum(abs(as.numeric(predict(model_rf, newdata=X_test)) - 1 - y_test))/length(y_test)
accuracy_xtree[i] = 1 - sum(abs(as.numeric(predict(model_xtree, newdata=X_test)) - 1 - y_test))/length(y_test)
accuracy_svm[i] =  1 - sum(abs(as.numeric(predict(model_svm, newdata=X_test)) - 1 - y_test))/length(y_test)
}
library("randomGLM")
library("randomForest")
library("extraTrees")
library("e1071")
set.seed(12345)
pulsar_stars <- read.csv("Data/PulsarStar/pulsar_stars.csv")
X = pulsar_stars[,1:8]
y = pulsar_stars[, 9]
n_train = 13000
accuracy_rglm = rep(0, 100)
accuracy_rf_bigmtry = rep(0, 100)
accuracy_rf = rep(0, 100)
accuracy_xtree = rep(0, 100)
accuracy_svm = rep(0, 100)
for (i in 1:10){
idx = sample(length(y), size = n_train, replace = FALSE)
X_train = X[idx, ]
y_train = y[idx]
X_test = X[-idx, ]
y_test = y[-idx]
bags = 100
model_rglm = randomGLM(x=X_train, y=y_train, xtest = X_test, nBags = bags)
model_rf_bigmtry = randomForest(x = X_train, y = as.factor(y_train),ntree = 500, mtry = ncol(X_train))
model_rf = randomForest(x = X_train, y = as.factor(y_train), ntree = 500)
model_xtree = extraTrees(x = X_train, y = as.factor(y_train), ntree = 500)
model_svm = svm(x = X_train, y = as.factor(y_train))
accuracy_rglm[i] = 1 - sum(abs(model_rglm$predictedTest - y_test))/length(y_test)
accuracy_rf_bigmtry[i] = 1 - sum(abs(as.numeric(predict(model_rf_bigmtry, newdata=X_test)) - 1 - y_test))/length(y_test)
accuracy_rf[i] = 1 - sum(abs(as.numeric(predict(model_rf, newdata=X_test)) - 1 - y_test))/length(y_test)
accuracy_xtree[i] = 1 - sum(abs(as.numeric(predict(model_xtree, newdata=X_test)) - 1 - y_test))/length(y_test)
accuracy_svm[i] =  1 - sum(abs(as.numeric(predict(model_svm, newdata=X_test)) - 1 - y_test))/length(y_test)
}
library("randomGLM")
library("randomForest")
library("extraTrees")
library("e1071")
set.seed(12345)
data <- read.csv("Data/UKHousing/price_paid_records.csv", nrows = 30000)
cols_to_keep = c(4, 5, 6, 9)
X = data[, cols_to_keep]
y = data[, 2]
for (i in 1:ncol(X)){
X[, i] = as.numeric(X[, i])
}
n_train = 20000
reps = 10
accuracy_rglm = rep(0, reps)
accuracy_rf_bigmtry = rep(0, reps)
accuracy_rf = rep(0, reps)
accuracy_xtree = rep(0, reps)
accuracy_svm = rep(0, reps)
idx = sample(length(y), size = n_train, replace = FALSE)
X_train = X[idx, ]
y_train = y[idx]
X_test = X[-idx, ]
y_test = y[-idx]
bags = 100
model_rglm = randomGLM(x=X_train, y=y_train, xtest = X_test, nBags = bags)
model_rf_bigmtry = randomForest(x = X_train, y = as.factor(y_train),ntree = 500, mtry = ncol(X_train))
model_rf_bigmtry = randomForest(x = X_train, y = y_train, ntree = 500, mtry = ncol(X_train))
model_rf = randomForest(x = X_train, y = y_train, ntree = 500)
model_xtree = extraTrees(x = X_train, y = y_train, ntree = 500)
model_svm = svm(x = X_train, y = y_train)
library("randomGLM")
library("randomForest")
library("extraTrees")
library("e1071")
set.seed(12345)
data <- read.csv("Data/UKHousing/price_paid_records.csv", nrows = 30000)
cols_to_keep = c(4, 5, 6, 9)
X = data[, cols_to_keep]
y = data[, 2]
for (i in 1:ncol(X)){
X[, i] = as.numeric(X[, i])
}
n_train = 20000
reps = 10
accuracy_rglm = rep(0, reps)
accuracy_rf_bigmtry = rep(0, reps)
accuracy_rf = rep(0, reps)
accuracy_xtree = rep(0, reps)
accuracy_svm = rep(0, reps)
for (i in 1:reps){
idx = sample(length(y), size = n_train, replace = FALSE)
X_train = X[idx, ]
y_train = y[idx]
X_test = X[-idx, ]
y_test = y[-idx]
bags = 100
model_rglm = randomGLM(x=X_train, y=y_train, xtest = X_test, nBags = bags)
model_rf_bigmtry = randomForest(x = X_train, y = y_train, ntree = 500, mtry = ncol(X_train))
model_rf = randomForest(x = X_train, y = y_train, ntree = 500)
model_xtree = extraTrees(x = X_train, y = y_train, ntree = 500)
model_svm = svm(x = X_train, y = y_train)
accuracy_rglm[i] = sqrt(mean((log(model_rglm$predictedTest) - log(y_test))^2))
accuracy_rf_bigmtry[i] = sqrt(mean((log(predict(model_rf_bigmtry, newdata=X_test))- log(y_test))^2))
accuracy_rf[i] = sqrt(mean((log(predict(model_rf, newdata=X_test))- log(y_test))^2))
accuracy_xtree[i] = sqrt(mean((log(predict(model_xtree, newdata=X_test))- log(y_test))^2))
accuracy_svm[i] = sqrt(mean((log(predict(model_svm, newdata=X_test))- log(y_test))^2))
}
mean(accuracy_rglm)
mean(accuracy_rf_bigmtry)
mean(accuracy_rf)
mean(accuracy_xtree)
mean(accuracy_svm)
